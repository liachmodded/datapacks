buildscript {
    repositories {
        jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.net.minecrell:licenser:0.4.1"
        classpath 'com.novoda:bintray-release:0.9-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'net.minecrell.licenser'
apply plugin: 'com.novoda.bintray-release'

version = "0.3"
group = "com.github.liachmodded"
archivesBaseName = "datapacks"
description = "Applies data (advancement, loot table, etc.) across saves and in newly created worlds."

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.compilerArgs += [
            '-Xlint:-processing',
            '-proc:none'
    ]
    options.encoding = 'utf8'
}

minecraft {
    version = "1.12.2-14.23.5.2775"
    runDir = "run"
    mappings = "stable_39"
    coreMod = project.coreMod
    makeObfSourceJar = false
    // an Srg named sources jar is made by default. uncomment this to disable.
}

license {
    header = project.file('gradle/header.txt')
    newLine false
    style.java = 'BLOCK_COMMENT'

    include '**/*.java'
}

publish {
    userOrg = 'liachmodded'
    groupId = project.group
    artifactId = project.archiveBaseName
    publishVersion = project.version
    desc = project.description
    website = 'https://github.com/liachmodded/datapacks'
}

sourceSets {
    coremod {
        compileClasspath += main.compileClasspath
    }
    main {
        runtimeClasspath += coremod.output
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'description': project.description, 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(Javadoc) {
    // disable the crazy super-strict doclint tool in Java 8
    options.addStringOption('Xdoclint:none', '-quiet')
}

task coreModJar(type: Jar) {
    from sourceSets.coremod.output
    manifest {
        attributes(
                'FMLCorePlugin': project.coreMod
        )
    }
    classifier = 'coremod'
}
def coreModFile = tasks.coreModJar.outputs.files.singleFile

jar {
    from coreModFile
    manifest {
        attributes([
                'ContainedDeps': coreModFile.name
        ])
    }
}

tasks.getByName("jar").dependsOn tasks.getByName("coreModJar")

runClient.outputs.upToDateWhen { false }
runServer.outputs.upToDateWhen { false }
